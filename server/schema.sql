SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgroonga" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."action_type" AS ENUM (
    'addNote',
    'updateNote'
);

ALTER TYPE "public"."action_type" OWNER TO "postgres";

CREATE TYPE "public"."media_source" AS ENUM (
    'youtube'
);

ALTER TYPE "public"."media_source" OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."delete_user"() RETURNS "void"
    LANGUAGE "sql" SECURITY DEFINER
    AS $$
  delete from auth.users where id = auth.uid();
$$;

ALTER FUNCTION "public"."delete_user"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."search_sentences"("keyword" "text") RETURNS TABLE("id" integer, "sentence" "text", "len" integer, "sentence_furigana" "text", "translation" "text", "audio" "text", "image" "text", "start_time" integer, "source_id" "text", "highlighted_sentence" "text", "highlighted_language" "text", "sentence_furigana_highlight" "text")
    LANGUAGE "plpgsql"
    AS $_$
DECLARE
    is_english BOOLEAN;
BEGIN
    -- Detect if the keyword is English (simple detection using regular expression)
    is_english := keyword ~ '^[a-zA-Z]+$';

    RETURN QUERY
    SELECT
        notes.id,
        notes.sentence,
        LENGTH(notes.sentence) AS len,
        notes.sentence_furigana,
        notes.translation,
        notes.audio,
        notes.image,
        notes.start_time,
        notes.source_id,
        CASE
            WHEN is_english THEN pgroonga_highlight_html(notes.translation, pgroonga_query_extract_keywords(keyword))
            ELSE pgroonga_highlight_html(notes.sentence, pgroonga_query_extract_keywords(keyword))
        END AS highlighted_sentence,
        CASE
            WHEN is_english THEN 'en'
            ELSE 'ja'
        END AS highlighted_language,
        CASE
            WHEN NOT is_english THEN pgroonga_highlight_html(notes.sentence_furigana, pgroonga_query_extract_keywords(keyword))
            ELSE ''
        END AS sentence_furigana_highlight
    FROM
        notes
    WHERE
        (is_english AND notes.translation &@~ keyword) OR
        (NOT is_english AND (notes.sentence &@~ keyword OR notes.sentence &@~ pgroonga_query_expand('synonyms', 'term', 'synonyms', keyword)))
    ORDER BY pgroonga_score(tableoid, ctid) DESC;
EXCEPTION
    WHEN others THEN
        RAISE EXCEPTION 'An error occurred in search_sentences function: %', SQLERRM;
END;
$_$;

ALTER FUNCTION "public"."search_sentences"("keyword" "text") OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."notes" (
    "id" integer NOT NULL,
    "sentence" "text" NOT NULL,
    "sentence_furigana" "text" NOT NULL,
    "translation" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "audio" "text",
    "image" "text",
    "start_time" integer,
    "source" "public"."media_source",
    "source_id" "text",
    "external_id" integer NOT NULL
);

ALTER TABLE "public"."notes" OWNER TO "postgres";

COMMENT ON TABLE "public"."notes" IS 'each individual searchable note';

ALTER TABLE "public"."notes" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."note_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "name" "text" NOT NULL,
    "deck_name" "text" NOT NULL,
    "note_type" "text" NOT NULL,
    "action_type" "public"."action_type" NOT NULL,
    "expression_field" "text",
    "reading_field" "text",
    "translation_field" "text",
    "audio_field" "text",
    "image_field" "text",
    CONSTRAINT "profile_audio_field_check" CHECK (("length"("audio_field") < 50)),
    CONSTRAINT "profile_deck_name_check" CHECK (("length"("deck_name") < 50)),
    CONSTRAINT "profile_expression_field_check" CHECK (("length"("expression_field") < 50)),
    CONSTRAINT "profile_image_field_check" CHECK (("length"("image_field") < 50)),
    CONSTRAINT "profile_name_check" CHECK (("length"("name") < 50)),
    CONSTRAINT "profile_note_type_check" CHECK (("length"("note_type") < 50)),
    CONSTRAINT "profile_reading_field_check" CHECK (("length"("reading_field") < 50)),
    CONSTRAINT "profile_translation_field_check" CHECK (("length"("translation_field") < 50))
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

COMMENT ON TABLE "public"."profiles" IS 'user anki export profiles';

ALTER TABLE "public"."profiles" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."profile_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."synonyms" (
    "term" "text" NOT NULL,
    "synonyms" "text"[]
);

ALTER TABLE "public"."synonyms" OWNER TO "postgres";

ALTER TABLE ONLY "public"."notes"
    ADD CONSTRAINT "note_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."notes"
    ADD CONSTRAINT "notes_external_id_key" UNIQUE ("external_id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profile_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."synonyms"
    ADD CONSTRAINT "synonyms_pkey" PRIMARY KEY ("term");

CREATE INDEX "ix_notes_sentence" ON "public"."notes" USING "pgroonga" ("sentence");

CREATE INDEX "pgroonga_note_sentence_index" ON "public"."notes" USING "pgroonga" ("sentence");

CREATE INDEX "pgroonga_score_notes_sentence_index" ON "public"."notes" USING "pgroonga" ("sentence");

CREATE INDEX "synonyms_search" ON "public"."synonyms" USING "pgroonga" ("term" "extensions"."pgroonga_text_term_search_ops_v2");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "public_profile_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

CREATE POLICY "Enable delete for users based on user_id" ON "public"."profiles" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable insert for users based on user_id" ON "public"."profiles" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable read access for all users" ON "public"."notes" FOR SELECT USING (true);

CREATE POLICY "Enable select for users based on user_id" ON "public"."profiles" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

ALTER TABLE "public"."notes" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."synonyms" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."delete_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."delete_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."delete_user"() TO "service_role";

GRANT ALL ON FUNCTION "public"."search_sentences"("keyword" "text") TO "anon";
GRANT ALL ON FUNCTION "public"."search_sentences"("keyword" "text") TO "authenticated";
GRANT ALL ON FUNCTION "public"."search_sentences"("keyword" "text") TO "service_role";

GRANT ALL ON TABLE "public"."notes" TO "anon";
GRANT ALL ON TABLE "public"."notes" TO "authenticated";
GRANT ALL ON TABLE "public"."notes" TO "service_role";

GRANT ALL ON SEQUENCE "public"."note_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."note_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."note_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON SEQUENCE "public"."profile_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."profile_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."profile_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."synonyms" TO "anon";
GRANT ALL ON TABLE "public"."synonyms" TO "authenticated";
GRANT ALL ON TABLE "public"."synonyms" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;